#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

namespace LocalDatabase.Model
{

    public partial class RSSReaderDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertArticle(Article instance);
        partial void UpdateArticle(Article instance);
        partial void DeleteArticle(Article instance);
        partial void InsertCategory(Category instance);
        partial void UpdateCategory(Category instance);
        partial void DeleteCategory(Category instance);
        partial void InsertCategory_Feed(Category_Feed instance);
        partial void UpdateCategory_Feed(Category_Feed instance);
        partial void DeleteCategory_Feed(Category_Feed instance);
        partial void InsertFeed(Feed instance);
        partial void UpdateFeed(Feed instance);
        partial void DeleteFeed(Feed instance);
        partial void InsertImage(Image instance);
        partial void UpdateImage(Image instance);
        partial void DeleteImage(Image instance);
        #endregion

        public RSSReaderDataContext(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }


        public RSSReaderDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }


        public System.Data.Linq.Table<Article> Article
        {
            get
            {
                return this.GetTable<Article>();
            }
        }

        public System.Data.Linq.Table<Category> Category
        {
            get
            {
                return this.GetTable<Category>();
            }
        }

        public System.Data.Linq.Table<Category_Feed> Category_Feed
        {
            get
            {
                return this.GetTable<Category_Feed>();
            }
        }

        public System.Data.Linq.Table<Feed> Feed
        {
            get
            {
                return this.GetTable<Feed>();
            }
        }

        public System.Data.Linq.Table<Image> Image
        {
            get
            {
                return this.GetTable<Image>();
            }
        }
    }

    [Table()]
    public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ArticleID;

        private string _ArticleTitle;

        private string _Authors;

        private string _ArticleBaseURI;

        private System.Nullable<System.DateTime> _LastUpdatedTime;

        private System.Nullable<System.DateTime> _PublishDate;

        private string _Summary;

        private System.Nullable<bool> _Read;

        private System.Nullable<int> _FeedID;

        private EntitySet<Image> _Image;

        private EntityRef<Feed> _Feed;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnArticleIDChanging(int value);
        partial void OnArticleIDChanged();
        partial void OnArticleTitleChanging(string value);
        partial void OnArticleTitleChanged();
        partial void OnAuthorsChanging(string value);
        partial void OnAuthorsChanged();
        partial void OnArticleBaseURIChanging(string value);
        partial void OnArticleBaseURIChanged();
        partial void OnLastUpdatedTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnLastUpdatedTimeChanged();
        partial void OnPublishDateChanging(System.Nullable<System.DateTime> value);
        partial void OnPublishDateChanged();
        partial void OnSummaryChanging(string value);
        partial void OnSummaryChanged();
        partial void OnReadChanging(System.Nullable<bool> value);
        partial void OnReadChanged();
        partial void OnFeedIDChanging(System.Nullable<int> value);
        partial void OnFeedIDChanged();
        #endregion

        public Article()
        {
            this._Image = new EntitySet<Image>(new Action<Image>(this.attach_Image), new Action<Image>(this.detach_Image));
            this._Feed = default(EntityRef<Feed>);
            OnCreated();
        }

        [Column(Storage = "_ArticleID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ArticleID
        {
            get
            {
                return this._ArticleID;
            }
            set
            {
                if ((this._ArticleID != value))
                {
                    this.OnArticleIDChanging(value);
                    this.SendPropertyChanging();
                    this._ArticleID = value;
                    this.SendPropertyChanged("ArticleID");
                    this.OnArticleIDChanged();
                }
            }
        }

        [Column(Storage = "_ArticleTitle", DbType = "NVarChar(200)")]
        public string ArticleTitle
        {
            get
            {
                return this._ArticleTitle;
            }
            set
            {
                if ((this._ArticleTitle != value))
                {
                    this.OnArticleTitleChanging(value);
                    this.SendPropertyChanging();
                    this._ArticleTitle = value;
                    this.SendPropertyChanged("ArticleTitle");
                    this.OnArticleTitleChanged();
                }
            }
        }

        [Column(Storage = "_Authors", DbType = "NVarChar(200)")]
        public string Authors
        {
            get
            {
                return this._Authors;
            }
            set
            {
                if ((this._Authors != value))
                {
                    this.OnAuthorsChanging(value);
                    this.SendPropertyChanging();
                    this._Authors = value;
                    this.SendPropertyChanged("Authors");
                    this.OnAuthorsChanged();
                }
            }
        }

        [Column(Storage = "_ArticleBaseURI", DbType = "NVarChar(200)")]
        public string ArticleBaseURI
        {
            get
            {
                return this._ArticleBaseURI;
            }
            set
            {
                if ((this._ArticleBaseURI != value))
                {
                    this.OnArticleBaseURIChanging(value);
                    this.SendPropertyChanging();
                    this._ArticleBaseURI = value;
                    this.SendPropertyChanged("ArticleBaseURI");
                    this.OnArticleBaseURIChanged();
                }
            }
        }

        [Column(Storage = "_LastUpdatedTime", DbType = "DateTime")]
        public System.Nullable<System.DateTime> LastUpdatedTime
        {
            get
            {
                return this._LastUpdatedTime;
            }
            set
            {
                if ((this._LastUpdatedTime != value))
                {
                    this.OnLastUpdatedTimeChanging(value);
                    this.SendPropertyChanging();
                    this._LastUpdatedTime = value;
                    this.SendPropertyChanged("LastUpdatedTime");
                    this.OnLastUpdatedTimeChanged();
                }
            }
        }

        [Column(Storage = "_PublishDate", DbType = "DateTime")]
        public System.Nullable<System.DateTime> PublishDate
        {
            get
            {
                return this._PublishDate;
            }
            set
            {
                if ((this._PublishDate != value))
                {
                    this.OnPublishDateChanging(value);
                    this.SendPropertyChanging();
                    this._PublishDate = value;
                    this.SendPropertyChanged("PublishDate");
                    this.OnPublishDateChanged();
                }
            }
        }

        [Column(Storage = "_Summary", DbType = "NVarChar(4000)")]
        public string Summary
        {
            get
            {
                return this._Summary;
            }
            set
            {
                if ((this._Summary != value))
                {
                    this.OnSummaryChanging(value);
                    this.SendPropertyChanging();
                    this._Summary = value;
                    this.SendPropertyChanged("Summary");
                    this.OnSummaryChanged();
                }
            }
        }

        [Column(Storage = "_Read", DbType = "Bit")]
        public System.Nullable<bool> Read
        {
            get
            {
                return this._Read;
            }
            set
            {
                if ((this._Read != value))
                {
                    this.OnReadChanging(value);
                    this.SendPropertyChanging();
                    this._Read = value;
                    this.SendPropertyChanged("Read");
                    this.OnReadChanged();
                }
            }
        }

        [Column(Storage = "_FeedID", DbType = "Int")]
        public System.Nullable<int> FeedID
        {
            get
            {
                return this._FeedID;
            }
            set
            {
                if ((this._FeedID != value))
                {
                    if (this._Feed.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFeedIDChanging(value);
                    this.SendPropertyChanging();
                    this._FeedID = value;
                    this.SendPropertyChanged("FeedID");
                    this.OnFeedIDChanged();
                }
            }
        }

        [Association(Name = "Article-Image", Storage = "_Image", ThisKey = "ArticleID", OtherKey = "ArticleID", DeleteRule = "CASCADE")]
        public EntitySet<Image> Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                this._Image.Assign(value);
            }
        }

        [Association(Name = "Feed-Article", Storage = "_Feed", ThisKey = "FeedID", OtherKey = "FeedID", IsForeignKey = true)]
        public Feed Feed
        {
            get
            {
                return this._Feed.Entity;
            }
            set
            {
                Feed previousValue = this._Feed.Entity;
                if (((previousValue != value)
                            || (this._Feed.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Feed.Entity = null;
                        previousValue.Article.Remove(this);
                    }
                    this._Feed.Entity = value;
                    if ((value != null))
                    {
                        value.Article.Add(this);
                        this._FeedID = value.FeedID;
                    }
                    else
                    {
                        this._FeedID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Feed");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Image(Image entity)
        {
            this.SendPropertyChanging();
            entity.Article = this;
        }

        private void detach_Image(Image entity)
        {
            this.SendPropertyChanging();
            entity.Article = null;
        }
    }

    [Table()]
    public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _CategoryID;

        private string _CategoryTitle;

        private System.Nullable<int> _CategoryViewCount;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIDChanging(int value);
        partial void OnCategoryIDChanged();
        partial void OnCategoryTitleChanging(string value);
        partial void OnCategoryTitleChanged();
        partial void OnCategoryViewCountChanging(System.Nullable<int> value);
        partial void OnCategoryViewCountChanged();
        #endregion

        public Category()
        {
            OnCreated();
        }

        [Column(Storage = "_CategoryID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int CategoryID
        {
            get
            {
                return this._CategoryID;
            }
            set
            {
                if ((this._CategoryID != value))
                {
                    this.OnCategoryIDChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryID = value;
                    this.SendPropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }

        [Column(Storage = "_CategoryTitle", DbType = "NVarChar(100)")]
        public string CategoryTitle
        {
            get
            {
                return this._CategoryTitle;
            }
            set
            {
                if ((this._CategoryTitle != value))
                {
                    this.OnCategoryTitleChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryTitle = value;
                    this.SendPropertyChanged("CategoryTitle");
                    this.OnCategoryTitleChanged();
                }
            }
        }

        [Column(Storage = "_CategoryViewCount", DbType = "Int")]
        public System.Nullable<int> CategoryViewCount
        {
            get
            {
                return this._CategoryViewCount;
            }
            set
            {
                if ((this._CategoryViewCount != value))
                {
                    this.OnCategoryViewCountChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryViewCount = value;
                    this.SendPropertyChanged("CategoryViewCount");
                    this.OnCategoryViewCountChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table()]
    public partial class Category_Feed : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.Nullable<int> _CategoryID;

        private System.Nullable<int> _FeedID;

        private int _Category_FeedID;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIDChanging(System.Nullable<int> value);
        partial void OnCategoryIDChanged();
        partial void OnFeedIDChanging(System.Nullable<int> value);
        partial void OnFeedIDChanged();
        partial void OnCategory_FeedIDChanging(int value);
        partial void OnCategory_FeedIDChanged();
        #endregion

        public Category_Feed()
        {
            OnCreated();
        }

        [Column(Storage = "_CategoryID", DbType = "Int")]
        public System.Nullable<int> CategoryID
        {
            get
            {
                return this._CategoryID;
            }
            set
            {
                if ((this._CategoryID != value))
                {
                    this.OnCategoryIDChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryID = value;
                    this.SendPropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }

        [Column(Storage = "_FeedID", DbType = "Int")]
        public System.Nullable<int> FeedID
        {
            get
            {
                return this._FeedID;
            }
            set
            {
                if ((this._FeedID != value))
                {
                    this.OnFeedIDChanging(value);
                    this.SendPropertyChanging();
                    this._FeedID = value;
                    this.SendPropertyChanged("FeedID");
                    this.OnFeedIDChanged();
                }
            }
        }

        [Column(Storage = "_Category_FeedID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int Category_FeedID
        {
            get
            {
                return this._Category_FeedID;
            }
            set
            {
                if ((this._Category_FeedID != value))
                {
                    this.OnCategory_FeedIDChanging(value);
                    this.SendPropertyChanging();
                    this._Category_FeedID = value;
                    this.SendPropertyChanged("Category_FeedID");
                    this.OnCategory_FeedIDChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table()]
    public partial class Feed : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _FeedID;

        private string _FeedTitle;

        private string _FeedBaseURI;

        private string _FeedDescription;

        private System.Nullable<int> _UnreadCount;

        private System.Nullable<int> _ViewCount;

        private System.Nullable<int> _FavoritedCount;

        private System.Nullable<int> _SharedCount;

        private EntitySet<Article> _Article;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnFeedIDChanging(int value);
        partial void OnFeedIDChanged();
        partial void OnFeedTitleChanging(string value);
        partial void OnFeedTitleChanged();
        partial void OnFeedBaseURIChanging(string value);
        partial void OnFeedBaseURIChanged();
        partial void OnFeedDescriptionChanging(string value);
        partial void OnFeedDescriptionChanged();
        partial void OnUnreadCountChanging(System.Nullable<int> value);
        partial void OnUnreadCountChanged();
        partial void OnViewCountChanging(System.Nullable<int> value);
        partial void OnViewCountChanged();
        partial void OnFavoritedCountChanging(System.Nullable<int> value);
        partial void OnFavoritedCountChanged();
        partial void OnSharedCountChanging(System.Nullable<int> value);
        partial void OnSharedCountChanged();
        #endregion

        public Feed()
        {
            this._Article = new EntitySet<Article>(new Action<Article>(this.attach_Article), new Action<Article>(this.detach_Article));
            OnCreated();
        }

        [Column(Storage = "_FeedID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int FeedID
        {
            get
            {
                return this._FeedID;
            }
            set
            {
                if ((this._FeedID != value))
                {
                    this.OnFeedIDChanging(value);
                    this.SendPropertyChanging();
                    this._FeedID = value;
                    this.SendPropertyChanged("FeedID");
                    this.OnFeedIDChanged();
                }
            }
        }

        [Column(Storage = "_FeedTitle", DbType = "NVarChar(100)")]
        public string FeedTitle
        {
            get
            {
                return this._FeedTitle;
            }
            set
            {
                if ((this._FeedTitle != value))
                {
                    this.OnFeedTitleChanging(value);
                    this.SendPropertyChanging();
                    this._FeedTitle = value;
                    this.SendPropertyChanged("FeedTitle");
                    this.OnFeedTitleChanged();
                }
            }
        }

        [Column(Storage = "_FeedBaseURI", DbType = "NVarChar(100)")]
        public string FeedBaseURI
        {
            get
            {
                return this._FeedBaseURI;
            }
            set
            {
                if ((this._FeedBaseURI != value))
                {
                    this.OnFeedBaseURIChanging(value);
                    this.SendPropertyChanging();
                    this._FeedBaseURI = value;
                    this.SendPropertyChanged("FeedBaseURI");
                    this.OnFeedBaseURIChanged();
                }
            }
        }

        [Column(Storage = "_FeedDescription", DbType = "NVarChar(100)")]
        public string FeedDescription
        {
            get
            {
                return this._FeedDescription;
            }
            set
            {
                if ((this._FeedDescription != value))
                {
                    this.OnFeedDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._FeedDescription = value;
                    this.SendPropertyChanged("FeedDescription");
                    this.OnFeedDescriptionChanged();
                }
            }
        }

        [Column(Storage = "_UnreadCount", DbType = "Int")]
        public System.Nullable<int> UnreadCount
        {
            get
            {
                return this._UnreadCount;
            }
            set
            {
                if ((this._UnreadCount != value))
                {
                    this.OnUnreadCountChanging(value);
                    this.SendPropertyChanging();
                    this._UnreadCount = value;
                    this.SendPropertyChanged("UnreadCount");
                    this.OnUnreadCountChanged();
                }
            }
        }

        [Column(Storage = "_ViewCount", DbType = "Int")]
        public System.Nullable<int> ViewCount
        {
            get
            {
                return this._ViewCount;
            }
            set
            {
                if ((this._ViewCount != value))
                {
                    this.OnViewCountChanging(value);
                    this.SendPropertyChanging();
                    this._ViewCount = value;
                    this.SendPropertyChanged("ViewCount");
                    this.OnViewCountChanged();
                }
            }
        }

        [Column(Storage = "_FavoritedCount", DbType = "Int")]
        public System.Nullable<int> FavoritedCount
        {
            get
            {
                return this._FavoritedCount;
            }
            set
            {
                if ((this._FavoritedCount != value))
                {
                    this.OnFavoritedCountChanging(value);
                    this.SendPropertyChanging();
                    this._FavoritedCount = value;
                    this.SendPropertyChanged("FavoritedCount");
                    this.OnFavoritedCountChanged();
                }
            }
        }

        [Column(Storage = "_SharedCount", DbType = "Int")]
        public System.Nullable<int> SharedCount
        {
            get
            {
                return this._SharedCount;
            }
            set
            {
                if ((this._SharedCount != value))
                {
                    this.OnSharedCountChanging(value);
                    this.SendPropertyChanging();
                    this._SharedCount = value;
                    this.SendPropertyChanged("SharedCount");
                    this.OnSharedCountChanged();
                }
            }
        }

        [Association(Name = "Feed-Article", Storage = "_Article", ThisKey = "FeedID", OtherKey = "FeedID", DeleteRule = "CASCADE")]
        public EntitySet<Article> Article
        {
            get
            {
                return this._Article;
            }
            set
            {
                this._Article.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Article(Article entity)
        {
            this.SendPropertyChanging();
            entity.Feed = this;
        }

        private void detach_Article(Article entity)
        {
            this.SendPropertyChanging();
            entity.Feed = null;
        }
    }

    [Table()]
    public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ImageID;

        private string _ImageURL;

        private System.Nullable<int> _ArticleID;

        private EntityRef<Article> _Article;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnImageIDChanging(int value);
        partial void OnImageIDChanged();
        partial void OnImageURLChanging(string value);
        partial void OnImageURLChanged();
        partial void OnArticleIDChanging(System.Nullable<int> value);
        partial void OnArticleIDChanged();
        #endregion

        public Image()
        {
            this._Article = default(EntityRef<Article>);
            OnCreated();
        }

        [Column(Storage = "_ImageID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ImageID
        {
            get
            {
                return this._ImageID;
            }
            set
            {
                if ((this._ImageID != value))
                {
                    this.OnImageIDChanging(value);
                    this.SendPropertyChanging();
                    this._ImageID = value;
                    this.SendPropertyChanged("ImageID");
                    this.OnImageIDChanged();
                }
            }
        }

        [Column(Storage = "_ImageURL", DbType = "NVarChar(100)")]
        public string ImageURL
        {
            get
            {
                return this._ImageURL;
            }
            set
            {
                if ((this._ImageURL != value))
                {
                    this.OnImageURLChanging(value);
                    this.SendPropertyChanging();
                    this._ImageURL = value;
                    this.SendPropertyChanged("ImageURL");
                    this.OnImageURLChanged();
                }
            }
        }

        [Column(Storage = "_ArticleID", DbType = "Int")]
        public System.Nullable<int> ArticleID
        {
            get
            {
                return this._ArticleID;
            }
            set
            {
                if ((this._ArticleID != value))
                {
                    if (this._Article.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnArticleIDChanging(value);
                    this.SendPropertyChanging();
                    this._ArticleID = value;
                    this.SendPropertyChanged("ArticleID");
                    this.OnArticleIDChanged();
                }
            }
        }

        [Association(Name = "Article-Image", Storage = "_Article", ThisKey = "ArticleID", OtherKey = "ArticleID", IsForeignKey = true)]
        public Article Article
        {
            get
            {
                return this._Article.Entity;
            }
            set
            {
                Article previousValue = this._Article.Entity;
                if (((previousValue != value)
                            || (this._Article.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Article.Entity = null;
                        previousValue.Image.Remove(this);
                    }
                    this._Article.Entity = value;
                    if ((value != null))
                    {
                        value.Image.Add(this);
                        this._ArticleID = value.ArticleID;
                    }
                    else
                    {
                        this._ArticleID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Article");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
#pragma warning restore 1591
